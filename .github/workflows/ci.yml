name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21.x, 1.22.x, 1.23.x, 1.24.x, 1.25.x]

    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules and build cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-
        
    - name: Set Go environment variables
      run: |
        echo "GOCACHE=$HOME/.cache/go-build" >> $GITHUB_ENV
        echo "GOMODCACHE=$HOME/go/pkg/mod" >> $GITHUB_ENV

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Display coverage
      run: |
        if [ -f coverage.out ]; then
          go tool cover -func=coverage.out
          echo "Coverage report generated: coverage.out"
        fi

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.25.x

    - name: Cache Go modules and build cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.25.x-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.25.x-
          ${{ runner.os }}-go-
        
    - name: Set Go environment variables
      run: |
        echo "GOCACHE=$HOME/.cache/go-build" >> $GITHUB_ENV
        echo "GOMODCACHE=$HOME/go/pkg/mod" >> $GITHUB_ENV

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.4.0
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Run golangci-lint
      run: golangci-lint run --timeout=5m

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.25.x

    - name: Cache Go modules and build cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.25.x-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.25.x-
          ${{ runner.os }}-go-
        
    - name: Set Go environment variables
      run: |
        echo "GOCACHE=$HOME/.cache/go-build" >> $GITHUB_ENV
        echo "GOMODCACHE=$HOME/go/pkg/mod" >> $GITHUB_ENV
        echo "GOBIN=$HOME/go/bin" >> $GITHUB_ENV

    - name: Cache Gosec binary
      uses: actions/cache@v4
      with:
        path: ~/go/bin
        key: ${{ runner.os }}-gosec-v2-latest

    - name: Install Gosec
      run: |
        if [ ! -f "$HOME/go/bin/gosec" ]; then
          go install github.com/securego/gosec/v2/cmd/gosec@latest
        fi

    - name: Run Gosec Security Scanner
      run: |
        $HOME/go/bin/gosec -no-fail -fmt sarif -out results.sarif ./...
      continue-on-error: true

    - name: Display Security Results
      run: |
        if [ -f results.sarif ]; then
          echo "Security scan completed. Results saved to results.sarif"
          # Display basic summary (optional)
          jq -r '.runs[0].results[] | "Issue: " + .ruleId + " - " + .message.text' results.sarif 2>/dev/null || echo "No security issues found"
        fi
      if: always()